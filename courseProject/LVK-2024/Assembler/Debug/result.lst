Microsoft (R) Macro Assembler Version 14.37.32822.0	    12/18/24 19:47:04
result.asm						     Page 1 - 1


				.586
				.model flat, stdcall
				includelib libucrt.lib
				includelib kernel32.lib
				includelib ..\Debug\StaticLibrary.lib
				ExitProcess PROTO:DWORD 
				.stack 4096


				 outnum PROTO : DWORD

				 outstr	   PROTO : DWORD

				 lenght	   PROTO : DWORD

				 atoii	   PROTO : DWORD,  : DWORD

				 fibonachi  PROTO : DWORD

				 factorial  PROTO : DWORD

				 power	   PROTO : DWORD,  : DWORD

 00000000			.const
 00000000 0D 0A 00				newline byte 13, 10, 0
 00000003 00000001				LTRL1 dword 1
 00000007 6D 79 70 72 69			LTRL2 byte 'myprint: ', 0
	   6E 74 3A 20 00
 00000011 20 20 20 20 20			LTRL3 byte '      -----------------------', 0
	   20 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 0000002F 20 20 20 20 20			LTRL4 byte '      test operation with num', 0
	   20 74 65 73 74
	   20 6F 70 65 72
	   61 74 69 6F 6E
	   20 77 69 74 68
	   20 6E 75 6D 00
 0000004D 00000004				LTRL5 dword 4
 00000051 00000011				LTRL6 dword 17
 00000055 61 3D 20 00				LTRL7 byte 'a= ', 0
 00000059 62 3D 20 00				LTRL8 byte 'b= ', 0
 0000005D 00000064				LTRL9 dword 100
 00000061 0000000A				LTRL10 dword 10
 00000065 00000002				LTRL11 dword 2
 00000069 31 29 20 72 65			LTRL12 byte '1) res= ', 0
	   73 3D 20 00
 00000072 00000005				LTRL13 dword 5
 00000076 32 29 20 72 65			LTRL14 byte '2) res= ', 0
	   73 3D 20 00
 0000007F 74 65 73 74 20			LTRL15 byte 'test My Min: ', 0
	   4D 79 20 4D 69
	   6E 3A 20 00
 0000008D 6D 69 6E 3A 20			LTRL16 byte 'min: ', 0
	   00
 00000093 20 20 20 20 20			LTRL17 byte '      ---------------------------------', 0
	   20 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 000000BB 20 20 20 20 20			LTRL18 byte '      test function from static library', 0
	   20 74 65 73 74
	   20 66 75 6E 63
	   74 69 6F 6E 20
	   66 72 6F 6D 20
	   73 74 61 74 69
	   63 20 6C 69 62
	   72 61 72 79 00
 000000E3 68 65 6C 6C 6F			LTRL19 byte 'hello', 0
	   00
 000000E9 6C 65 6E 67 68			LTRL20 byte 'lenght: ', 0
	   74 3A 20 00
 000000F2 35 31 32 35 00			LTRL21 byte '5125', 0
 000000F7 61 74 6F 69 69			LTRL22 byte 'atoii: ', 0
	   3A 20 00
 000000FF 00000006				LTRL23 dword 6
 00000103 70 6F 77 65 72			LTRL24 byte 'power: ', 0
	   3A 20 00
 0000010B 00000032				LTRL25 dword 50
 0000010F 66 69 62 6F 6E			LTRL26 byte 'fibonachi: ', 0
	   61 63 68 69 3A
	   20 00
 0000011B 46 61 63 74 6F			LTRL27 byte 'Factorial: ', 0
	   72 69 61 6C 3A
	   20 00
 00000127 74 65 73 74 20			LTRL28 byte 'test My Factorial: ', 0
	   4D 79 20 46 61
	   63 74 6F 72 69
	   61 6C 3A 20 00
 0000013B 20 20 20 20 20			LTRL29 byte '      -------------------', 0
	   20 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 00000155 20 20 20 20 20			LTRL30 byte '      test number systems', 0
	   20 74 65 73 74
	   20 6E 75 6D 62
	   65 72 20 73 79
	   73 74 65 6D 73
	   00
 0000016F 0000000B				LTRL31 dword 11
 00000173 000003EC				LTRL32 dword 1004
 00000177 00003039				LTRL33 dword 12345
 0000017B 00001F9A				LTRL34 dword 8090
 0000017F 62 69 6E 3A 20			LTRL35 byte 'bin: ', 0
	   00
 00000185 6F 63 74 3A 20			LTRL36 byte 'oct: ', 0
	   00
 0000018B 64 65 63 3A 20			LTRL37 byte 'dec: ', 0
	   00
 00000191 68 65 78 3A 20			LTRL38 byte 'hex: ', 0
	   00
 00000000			.data
 00000000 00000000				temp sdword ?
 00000004  00000100 [				buffer byte 256 dup(0)
	    00
	   ]
 00000104 45 52 52 4F 52		ERROR_MINUS byte 'ERROR 404: LEAVE THE RANGE',0
	   20 34 30 34 3A
	   20 4C 45 41 56
	   45 20 54 48 45
	   20 52 41 4E 47
	   45 00
 0000011F 45 52 52 4F 52		ERROR_DIVIDE byte 'ERROR 303: DIVIDE BY ZERO',0
	   20 33 30 33 3A
	   20 44 49 56 49
	   44 45 20 42 59
	   20 5A 45 52 4F
	   00
 00000139 00000000				facti dword 0
 0000013D 00000000				factres dword 0
 00000141 00000000				myminresult dword 0
 00000145 00000000				roota dword 0
 00000149 00000000				rootb dword 0
 0000014D 00000000				rootres dword 0
 00000151 00000000				rootmm dword 0
 00000155 00000000				rootle dword 0
 00000159 00000000				roote dword 0
 0000015D 00000000				rootbin dword 0
 00000161 00000000				rootoct dword 0
 00000165 00000000				rootdec dword 0
 00000169 00000000				roothex dword 0
 00000000			.code

				;----------- fact ------------
 00000000			_fact PROC,
					factnumber : dword  
				; ~~~ сохранение регистров ~~~
 00000003  53			push ebx
 00000004  52			push edx
				; ~~~~~~~~~~~~~~~~~~~~~~
 00000005  FF 35 00000003 R	push LTRL1

 0000000B  5B			pop ebx
 0000000C  89 1D 00000139 R	mov facti, ebx

 00000012  FF 35 00000003 R	push LTRL1

 00000018  5B			pop ebx
 00000019  89 1D 0000013D R	mov factres, ebx

 0000001F  8B 55 08		mov edx, factnumber
 00000022  3B 15 00000139 R	cmp edx, facti

 00000028  7F 02		jg cycle1
 0000002A  EB 62		jmp cyclenext1
 0000002C			cycle1:
 0000002C  FF 35 0000013D R	push factres
 00000032  FF 35 00000139 R	push facti
 00000038  5B			pop ebx
 00000039  58			pop eax
 0000003A  0F AF C3		imul eax, ebx
 0000003D  73 11		jnc out_range_mul_31
 0000003F  68 00000104 R	push offset ERROR_MINUS
 00000044  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 00000050			out_range_mul_31:
 00000050  50			push eax

 00000051  5B			pop ebx
 00000052  89 1D 0000013D R	mov factres, ebx

 00000058  FF 35 00000139 R	push facti
 0000005E  FF 35 00000003 R	push LTRL1
 00000064  5B			pop ebx
 00000065  58			pop eax
 00000066  03 C3		add eax, ebx
 00000068  73 11		jnc out_range_37
 0000006A  68 00000104 R	push offset ERROR_MINUS
 0000006F  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 0000007B			out_range_37:
 0000007B  50			push eax

 0000007C  5B			pop ebx
 0000007D  89 1D 00000139 R	mov facti, ebx

 00000083  8B 55 08		mov edx, factnumber
 00000086  3B 15 00000139 R	cmp edx, facti

 0000008C  7F 9E		jg cycle1
 0000008E			cyclenext1:
 0000008E  FF 35 0000013D R	push factres
 00000094  FF 75 08		push factnumber
 00000097  5B			pop ebx
 00000098  58			pop eax
 00000099  0F AF C3		imul eax, ebx
 0000009C  73 11		jnc out_range_mul_45
 0000009E  68 00000104 R	push offset ERROR_MINUS
 000000A3  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 000000AF			out_range_mul_45:
 000000AF  50			push eax

 000000B0  5B			pop ebx
 000000B1  89 1D 0000013D R	mov factres, ebx

				; ~~~ восстановление регистров ~~~
 000000B7  5A			pop edx
 000000B8  5B			pop ebx
				; ~~~~~~~~~~~~~~~~~~~~~~~~
 000000B9  A1 0000013D R	mov eax, factres
				ret
 000000C2			_fact ENDP
				;------------------------------


				;----------- myprint ------------
 000000C2			_myprint PROC,
					myprinta : dword  
				; ~~~ сохранение регистров ~~~
 000000C5  53			push ebx
 000000C6  52			push edx
				; ~~~~~~~~~~~~~~~~~~~~~~
 000000C7  68 00000000 R	push offset newline
 000000CC  E8 00000000 E	call outstr


 000000D1  68 00000007 R	push offset LTRL2
 000000D6  E8 00000000 E	call outstr


 000000DB  FF 75 08		push myprinta
 000000DE  E8 00000000 E	call outstr

				; ~~~ восстановление регистров ~~~
 000000E3  5A			pop edx
 000000E4  5B			pop ebx
				; ~~~~~~~~~~~~~~~~~~~~~~~~
				ret
 000000E9			_myprint ENDP
				;------------------------------


				;----------- mymin ------------
 000000E9			_mymin PROC,
					mymina : dword, myminb : dword  
				; ~~~ сохранение регистров ~~~
 000000EC  53			push ebx
 000000ED  52			push edx
				; ~~~~~~~~~~~~~~~~~~~~~~
 000000EE  8B 55 08		mov edx, mymina
 000000F1  3B 55 0C		cmp edx, myminb

 000000F4  7F 02		jg right2
 000000F6  7C 0C		jl wrong2
 000000F8			right2:
 000000F8  FF 75 0C		push myminb

 000000FB  5B			pop ebx
 000000FC  89 1D 00000141 R	mov myminresult, ebx

 00000102  EB 0A		jmp next2
 00000104			wrong2:
 00000104  FF 75 08		push mymina

 00000107  5B			pop ebx
 00000108  89 1D 00000141 R	mov myminresult, ebx

 0000010E			next2:
				; ~~~ восстановление регистров ~~~
 0000010E  5A			pop edx
 0000010F  5B			pop ebx
				; ~~~~~~~~~~~~~~~~~~~~~~~~
 00000110  A1 00000141 R	mov eax, myminresult
				ret
 00000119			_mymin ENDP
				;------------------------------


				;----------- MAIN ------------
 00000119			main PROC

 00000119  68 00000011 R	push offset LTRL3
 0000011E  E8 00000000 E	call outstr

 00000123  68 00000000 R	push offset newline
 00000128  E8 00000000 E	call outstr


 0000012D  68 0000002F R	push offset LTRL4
 00000132  E8 00000000 E	call outstr

 00000137  68 00000000 R	push offset newline
 0000013C  E8 00000000 E	call outstr


 00000141  68 00000011 R	push offset LTRL3
 00000146  E8 00000000 E	call outstr

 0000014B  68 00000000 R	push offset newline
 00000150  E8 00000000 E	call outstr

 00000155  FF 35 0000004D R	push LTRL5

 0000015B  5B			pop ebx
 0000015C  89 1D 00000145 R	mov roota, ebx

 00000162  FF 35 00000051 R	push LTRL6

 00000168  5B			pop ebx
 00000169  89 1D 00000149 R	mov rootb, ebx


 0000016F  68 00000055 R	push offset LTRL7
 00000174  E8 00000000 E	call outstr


 00000179  FF 35 00000145 R	push roota
 0000017F  E8 00000000 E	call outnum

 00000184  68 00000000 R	push offset newline
 00000189  E8 00000000 E	call outstr


 0000018E  68 00000059 R	push offset LTRL8
 00000193  E8 00000000 E	call outstr


 00000198  FF 35 00000149 R	push rootb
 0000019E  E8 00000000 E	call outnum

 000001A3  68 00000000 R	push offset newline
 000001A8  E8 00000000 E	call outstr

 000001AD  FF 35 00000145 R	push roota
 000001B3  FF 35 00000149 R	push rootb
 000001B9  FF 35 0000005D R	push LTRL9
 000001BF  FF 35 00000061 R	push LTRL10
 000001C5  5B			pop ebx
 000001C6  58			pop eax
 000001C7  3B D8		cmp ebx, eax
 000001C9  7E 11		jle positive_value_164
 000001CB  68 00000104 R	push offset ERROR_MINUS
 000001D0  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 000001DC			positive_value_164:
 000001DC  2B C3		sub eax, ebx
 000001DE  50			push eax
 000001DF  5B			pop ebx
 000001E0  58			pop eax
 000001E1  0F AF C3		imul eax, ebx
 000001E4  73 11		jnc out_range_mul_165
 000001E6  68 00000104 R	push offset ERROR_MINUS
 000001EB  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 000001F7			out_range_mul_165:
 000001F7  50			push eax
 000001F8  FF 35 00000065 R	push LTRL11
 000001FE  5B			pop ebx
 000001FF  58			pop eax
 00000200  83 FB 00		cmp ebx, 0
 00000203  75 11		jne division_by_zero_error_167
 00000205  68 0000011F R	push offset ERROR_DIVIDE
 0000020A  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 00000216			division_by_zero_error_167:
 00000216  99			cdq
 00000217  F7 FB		idiv ebx
 00000219  50			push eax
 0000021A  5B			pop ebx
 0000021B  58			pop eax
 0000021C  03 C3		add eax, ebx
 0000021E  73 11		jnc out_range_168
 00000220  68 00000104 R	push offset ERROR_MINUS
 00000225  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 00000231			out_range_168:
 00000231  50			push eax

 00000232  5B			pop ebx
 00000233  89 1D 0000014D R	mov rootres, ebx


 00000239  68 00000069 R	push offset LTRL12
 0000023E  E8 00000000 E	call outstr


 00000243  FF 35 0000014D R	push rootres
 00000249  E8 00000000 E	call outnum

 0000024E  FF 35 0000014D R	push rootres
 00000254  FF 35 00000149 R	push rootb
 0000025A  5B			pop ebx
 0000025B  58			pop eax
 0000025C  03 C3		add eax, ebx
 0000025E  73 11		jnc out_range_180
 00000260  68 00000104 R	push offset ERROR_MINUS
 00000265  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 00000271			out_range_180:
 00000271  50			push eax

 00000272  FF 35 00000061 R	push LTRL10
 00000278  FF 35 00000072 R	push LTRL13
 0000027E  E8 00000000 E	call power
 00000283  50			push eax
 00000284  5B			pop ebx
 00000285  58			pop eax
 00000286  03 C3		add eax, ebx
 00000288  73 11		jnc out_range_187
 0000028A  68 00000104 R	push offset ERROR_MINUS
 0000028F  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 0000029B			out_range_187:
 0000029B  50			push eax

 0000029C  5B			pop ebx
 0000029D  89 1D 0000014D R	mov rootres, ebx

 000002A3  68 00000000 R	push offset newline
 000002A8  E8 00000000 E	call outstr


 000002AD  68 00000076 R	push offset LTRL14
 000002B2  E8 00000000 E	call outstr


 000002B7  FF 35 0000014D R	push rootres
 000002BD  E8 00000000 E	call outnum

 000002C2  68 00000000 R	push offset newline
 000002C7  E8 00000000 E	call outstr

 000002CC  68 00000000 R	push offset newline
 000002D1  E8 00000000 E	call outstr


 000002D6  68 0000007F R	push offset LTRL15
 000002DB  E8 00000000 E	call outstr


 000002E0  FF 35 00000149 R	push rootb
 000002E6  FF 35 00000145 R	push roota
 000002EC  E8 FFFFFDF8		call _mymin
 000002F1  50			push eax

 000002F2  5B			pop ebx
 000002F3  89 1D 00000151 R	mov rootmm, ebx


 000002F9  68 0000008D R	push offset LTRL16
 000002FE  E8 00000000 E	call outstr


 00000303  FF 35 00000151 R	push rootmm
 00000309  E8 00000000 E	call outnum

 0000030E  68 00000000 R	push offset newline
 00000313  E8 00000000 E	call outstr

 00000318  68 00000000 R	push offset newline
 0000031D  E8 00000000 E	call outstr


 00000322  68 00000093 R	push offset LTRL17
 00000327  E8 00000000 E	call outstr

 0000032C  68 00000000 R	push offset newline
 00000331  E8 00000000 E	call outstr


 00000336  68 000000BB R	push offset LTRL18
 0000033B  E8 00000000 E	call outstr

 00000340  68 00000000 R	push offset newline
 00000345  E8 00000000 E	call outstr


 0000034A  68 00000093 R	push offset LTRL17
 0000034F  E8 00000000 E	call outstr

 00000354  68 00000000 R	push offset newline
 00000359  E8 00000000 E	call outstr


 0000035E  68 000000E3 R	push offset LTRL19
 00000363  E8 00000000 E	call lenght
 00000368  50			push eax

 00000369  5B			pop ebx
 0000036A  89 1D 00000155 R	mov rootle, ebx


 00000370  68 000000E9 R	push offset LTRL20
 00000375  E8 00000000 E	call outstr


 0000037A  FF 35 00000155 R	push rootle
 00000380  E8 00000000 E	call outnum

 00000385  68 00000000 R	push offset newline
 0000038A  E8 00000000 E	call outstr

 0000038F  68 00000000 R	push offset newline
 00000394  E8 00000000 E	call outstr


 00000399  68 000000F2 R	push offset LTRL21
 0000039E  68 00000004 R	push offset buffer
 000003A3  E8 00000000 E	call atoii
 000003A8  50			push eax

 000003A9  5B			pop ebx
 000003AA  89 1D 00000159 R	mov roote, ebx


 000003B0  68 000000F7 R	push offset LTRL22
 000003B5  E8 00000000 E	call outstr

 000003BA  FF 35 00000159 R	push roote
 000003C0  FF 35 000000FF R	push LTRL23
 000003C6  5B			pop ebx
 000003C7  58			pop eax
 000003C8  83 FB 00		cmp ebx, 0
 000003CB  75 11		jne division_by_zero_error_281
 000003CD  68 0000011F R	push offset ERROR_DIVIDE
 000003D2  E8 00000000 E	call outstr

				INVOKE ExitProcess,0
 000003DE			division_by_zero_error_281:
 000003DE  99			cdq
 000003DF  F7 FB		idiv ebx
 000003E1  50			push eax

 000003E2  5B			pop ebx
 000003E3  89 1D 00000159 R	mov roote, ebx


 000003E9  FF 35 00000159 R	push roote
 000003EF  E8 00000000 E	call outnum

 000003F4  68 00000000 R	push offset newline
 000003F9  E8 00000000 E	call outstr

 000003FE  68 00000000 R	push offset newline
 00000403  E8 00000000 E	call outstr


 00000408  FF 35 00000061 R	push LTRL10
 0000040E  FF 35 00000072 R	push LTRL13
 00000414  E8 00000000 E	call power
 00000419  50			push eax

 0000041A  5B			pop ebx
 0000041B  89 1D 00000159 R	mov roote, ebx


 00000421  68 00000103 R	push offset LTRL24
 00000426  E8 00000000 E	call outstr


 0000042B  FF 35 00000159 R	push roote
 00000431  E8 00000000 E	call outnum

 00000436  68 00000000 R	push offset newline
 0000043B  E8 00000000 E	call outstr

 00000440  68 00000000 R	push offset newline
 00000445  E8 00000000 E	call outstr


 0000044A  FF 35 0000010B R	push LTRL25
 00000450  E8 00000000 E	call fibonachi
 00000455  50			push eax

 00000456  5B			pop ebx
 00000457  89 1D 00000159 R	mov roote, ebx


 0000045D  68 0000010F R	push offset LTRL26
 00000462  E8 00000000 E	call outstr


 00000467  FF 35 00000159 R	push roote
 0000046D  E8 00000000 E	call outnum

 00000472  68 00000000 R	push offset newline
 00000477  E8 00000000 E	call outstr

 0000047C  68 00000000 R	push offset newline
 00000481  E8 00000000 E	call outstr


 00000486  FF 35 00000072 R	push LTRL13
 0000048C  E8 00000000 E	call factorial
 00000491  50			push eax

 00000492  5B			pop ebx
 00000493  89 1D 00000159 R	mov roote, ebx


 00000499  68 0000011B R	push offset LTRL27
 0000049E  E8 00000000 E	call outstr


 000004A3  FF 35 00000159 R	push roote
 000004A9  E8 00000000 E	call outnum

 000004AE  68 00000000 R	push offset newline
 000004B3  E8 00000000 E	call outstr

 000004B8  68 00000000 R	push offset newline
 000004BD  E8 00000000 E	call outstr


 000004C2  68 00000127 R	push offset LTRL28
 000004C7  E8 00000000 E	call outstr


 000004CC  FF 35 00000072 R	push LTRL13
 000004D2  E8 FFFFFB29		call _fact
 000004D7  50			push eax

 000004D8  5B			pop ebx
 000004D9  89 1D 00000159 R	mov roote, ebx


 000004DF  FF 35 00000159 R	push roote
 000004E5  E8 00000000 E	call outnum

 000004EA  68 00000000 R	push offset newline
 000004EF  E8 00000000 E	call outstr

 000004F4  68 00000000 R	push offset newline
 000004F9  E8 00000000 E	call outstr


 000004FE  68 0000013B R	push offset LTRL29
 00000503  E8 00000000 E	call outstr

 00000508  68 00000000 R	push offset newline
 0000050D  E8 00000000 E	call outstr


 00000512  68 00000155 R	push offset LTRL30
 00000517  E8 00000000 E	call outstr

 0000051C  68 00000000 R	push offset newline
 00000521  E8 00000000 E	call outstr


 00000526  68 0000013B R	push offset LTRL29
 0000052B  E8 00000000 E	call outstr

 00000530  68 00000000 R	push offset newline
 00000535  E8 00000000 E	call outstr

 0000053A  FF 35 0000016F R	push LTRL31

 00000540  5B			pop ebx
 00000541  89 1D 0000015D R	mov rootbin, ebx

 00000547  FF 35 00000173 R	push LTRL32

 0000054D  5B			pop ebx
 0000054E  89 1D 00000161 R	mov rootoct, ebx

 00000554  FF 35 00000177 R	push LTRL33

 0000055A  5B			pop ebx
 0000055B  89 1D 00000165 R	mov rootdec, ebx

 00000561  FF 35 0000017B R	push LTRL34

 00000567  5B			pop ebx
 00000568  89 1D 00000169 R	mov roothex, ebx


 0000056E  68 0000017F R	push offset LTRL35
 00000573  E8 00000000 E	call outstr


 00000578  FF 35 0000015D R	push rootbin
 0000057E  E8 00000000 E	call outnum

 00000583  68 00000000 R	push offset newline
 00000588  E8 00000000 E	call outstr


 0000058D  68 00000185 R	push offset LTRL36
 00000592  E8 00000000 E	call outstr


 00000597  FF 35 00000161 R	push rootoct
 0000059D  E8 00000000 E	call outnum

 000005A2  68 00000000 R	push offset newline
 000005A7  E8 00000000 E	call outstr


 000005AC  68 0000018B R	push offset LTRL37
 000005B1  E8 00000000 E	call outstr


 000005B6  FF 35 00000165 R	push rootdec
 000005BC  E8 00000000 E	call outnum

 000005C1  68 00000000 R	push offset newline
 000005C6  E8 00000000 E	call outstr


 000005CB  68 00000191 R	push offset LTRL38
 000005D0  E8 00000000 E	call outstr


 000005D5  FF 35 00000169 R	push roothex
 000005DB  E8 00000000 E	call outnum

 000005E0  68 00000000 R	push offset newline
 000005E5  E8 00000000 E	call outstr

 000005EA  6A 00		push 0
 000005EC  E8 00000000 E	call ExitProcess
 000005F1			main ENDP
				end main
Microsoft (R) Macro Assembler Version 14.37.32822.0	    12/18/24 19:47:04
result.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000197 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000016D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005F1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
_fact  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C2 Public STDCALL
  factnumber . . . . . . . . . .	DWord	 bp + 00000008
  cycle1 . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  out_range_mul_31 . . . . . . .	L Near	 00000050 _TEXT	
  out_range_37 . . . . . . . . .	L Near	 0000007B _TEXT	
  cyclenext1 . . . . . . . . . .	L Near	 0000008E _TEXT	
  out_range_mul_45 . . . . . . .	L Near	 000000AF _TEXT	
_mymin . . . . . . . . . . . . .	P Near	 000000E9 _TEXT	Length= 00000030 Public STDCALL
  mymina . . . . . . . . . . . .	DWord	 bp + 00000008
  myminb . . . . . . . . . . . .	DWord	 bp + 0000000C
  right2 . . . . . . . . . . . .	L Near	 000000F8 _TEXT	
  wrong2 . . . . . . . . . . . .	L Near	 00000104 _TEXT	
  next2  . . . . . . . . . . . .	L Near	 0000010E _TEXT	
_myprint . . . . . . . . . . . .	P Near	 000000C2 _TEXT	Length= 00000027 Public STDCALL
  myprinta . . . . . . . . . . .	DWord	 bp + 00000008
atoii  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
factorial  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fibonachi  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lenght . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000119 _TEXT	Length= 000004D8 Public STDCALL
  positive_value_164 . . . . . .	L Near	 000001DC _TEXT	
  out_range_mul_165  . . . . . .	L Near	 000001F7 _TEXT	
  division_by_zero_error_167 . .	L Near	 00000216 _TEXT	
  out_range_168  . . . . . . . .	L Near	 00000231 _TEXT	
  out_range_180  . . . . . . . .	L Near	 00000271 _TEXT	
  out_range_187  . . . . . . . .	L Near	 0000029B _TEXT	
  division_by_zero_error_281 . .	L Near	 000003DE _TEXT	
outnum . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
outstr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
power  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ERROR_DIVIDE . . . . . . . . . .	Byte	 0000011F _DATA	
ERROR_MINUS  . . . . . . . . . .	Byte	 00000104 _DATA	
LTRL10 . . . . . . . . . . . . .	DWord	 00000061 CONST	
LTRL11 . . . . . . . . . . . . .	DWord	 00000065 CONST	
LTRL12 . . . . . . . . . . . . .	Byte	 00000069 CONST	
LTRL13 . . . . . . . . . . . . .	DWord	 00000072 CONST	
LTRL14 . . . . . . . . . . . . .	Byte	 00000076 CONST	
LTRL15 . . . . . . . . . . . . .	Byte	 0000007F CONST	
LTRL16 . . . . . . . . . . . . .	Byte	 0000008D CONST	
LTRL17 . . . . . . . . . . . . .	Byte	 00000093 CONST	
LTRL18 . . . . . . . . . . . . .	Byte	 000000BB CONST	
LTRL19 . . . . . . . . . . . . .	Byte	 000000E3 CONST	
LTRL1  . . . . . . . . . . . . .	DWord	 00000003 CONST	
LTRL20 . . . . . . . . . . . . .	Byte	 000000E9 CONST	
LTRL21 . . . . . . . . . . . . .	Byte	 000000F2 CONST	
LTRL22 . . . . . . . . . . . . .	Byte	 000000F7 CONST	
LTRL23 . . . . . . . . . . . . .	DWord	 000000FF CONST	
LTRL24 . . . . . . . . . . . . .	Byte	 00000103 CONST	
LTRL25 . . . . . . . . . . . . .	DWord	 0000010B CONST	
LTRL26 . . . . . . . . . . . . .	Byte	 0000010F CONST	
LTRL27 . . . . . . . . . . . . .	Byte	 0000011B CONST	
LTRL28 . . . . . . . . . . . . .	Byte	 00000127 CONST	
LTRL29 . . . . . . . . . . . . .	Byte	 0000013B CONST	
LTRL2  . . . . . . . . . . . . .	Byte	 00000007 CONST	
LTRL30 . . . . . . . . . . . . .	Byte	 00000155 CONST	
LTRL31 . . . . . . . . . . . . .	DWord	 0000016F CONST	
LTRL32 . . . . . . . . . . . . .	DWord	 00000173 CONST	
LTRL33 . . . . . . . . . . . . .	DWord	 00000177 CONST	
LTRL34 . . . . . . . . . . . . .	DWord	 0000017B CONST	
LTRL35 . . . . . . . . . . . . .	Byte	 0000017F CONST	
LTRL36 . . . . . . . . . . . . .	Byte	 00000185 CONST	
LTRL37 . . . . . . . . . . . . .	Byte	 0000018B CONST	
LTRL38 . . . . . . . . . . . . .	Byte	 00000191 CONST	
LTRL3  . . . . . . . . . . . . .	Byte	 00000011 CONST	
LTRL4  . . . . . . . . . . . . .	Byte	 0000002F CONST	
LTRL5  . . . . . . . . . . . . .	DWord	 0000004D CONST	
LTRL6  . . . . . . . . . . . . .	DWord	 00000051 CONST	
LTRL7  . . . . . . . . . . . . .	Byte	 00000055 CONST	
LTRL8  . . . . . . . . . . . . .	Byte	 00000059 CONST	
LTRL9  . . . . . . . . . . . . .	DWord	 0000005D CONST	
buffer . . . . . . . . . . . . .	Byte	 00000004 _DATA	
facti  . . . . . . . . . . . . .	DWord	 00000139 _DATA	
factres  . . . . . . . . . . . .	DWord	 0000013D _DATA	
myminresult  . . . . . . . . . .	DWord	 00000141 _DATA	
newline  . . . . . . . . . . . .	Byte	 00000000 CONST	
roota  . . . . . . . . . . . . .	DWord	 00000145 _DATA	
rootbin  . . . . . . . . . . . .	DWord	 0000015D _DATA	
rootb  . . . . . . . . . . . . .	DWord	 00000149 _DATA	
rootdec  . . . . . . . . . . . .	DWord	 00000165 _DATA	
roote  . . . . . . . . . . . . .	DWord	 00000159 _DATA	
roothex  . . . . . . . . . . . .	DWord	 00000169 _DATA	
rootle . . . . . . . . . . . . .	DWord	 00000155 _DATA	
rootmm . . . . . . . . . . . . .	DWord	 00000151 _DATA	
rootoct  . . . . . . . . . . . .	DWord	 00000161 _DATA	
rootres  . . . . . . . . . . . .	DWord	 0000014D _DATA	
temp . . . . . . . . . . . . . .	DWord	 00000000 _DATA	

	   0 Warnings
	   0 Errors
