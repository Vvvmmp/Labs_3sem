num function fact(num number)[	
   # num i = 1;
   # num res = 1;
   when: number > i
	~
		loop[
		res = res * i;
		i = i+1;
	]
	~
	res = res * number;
   finish res;
]

inane function myprint(symbol a)[
   nl;
   print "myprint: ";
   print a;
   finish;
]

num function mymin(num a, num b)[
   # num result;
   when: a > b
   	~
	istrue[result = b;]
	isfalse[result = a;]
   	~
   finish result;
]
root[
	print "      -----------------------";
	nl;
	print "      test operation with num";
	nl;
	print "      -----------------------";
	nl;
	# num a = 4;
	# num b = 17;
	# num res;
	print "a= ";
	print a;
	nl;
	print "b= ";
	print b;
	nl;
	
	res = a + b * (100 - 10) / 2;
	print "1) res= ";
	print res;
	
	res = res + b + power(5,10);
	nl;
	print "2) res= ";
	print res;
	nl;
	nl;
	
	# num mm;
	print "test My Min: ";
	mm = mymin(a, b);
	print "min: ";
	print mm;
	nl;
	nl; 

print "      ---------------------------------";
nl;
print "      test function from static library";
nl;
print "      ---------------------------------";
nl;
# num le;
le = lenght("hello");
print "lenght: ";
print le;
nl;
nl;

# num e;
e = atoii("5125");
print "atoii: ";
e = e / 6;
print e;
nl;
nl;

e = power(5,10);
print "power: ";
print e;
nl;
nl;

e = fibonachi(40);
print "fibonachi: ";
print e;
nl;
nl;

e = factorial(5);
print "Factorial: ";
print e;
nl;
nl;

print "test My Factorial: ";
e = fact(5);
print e;
nl;
nl;

	print "      -------------------";
	nl;
	print "      test number systems";
	nl;
	print "      -------------------";
	nl;
	# num bin = 2x1011;
	# num oct = 8x1754;
	# num dec = 12345;
	# num hex = 16x1f9a;

	print "bin: ";
	print bin;
	nl;
	print "oct: ";
	print oct;
	nl;
	print "dec: ";
	print dec;
	nl;
	print "hex: ";
	print hex;
	nl;
]
